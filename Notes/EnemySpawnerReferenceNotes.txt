# SpawnerManager.gd
extends Node

@onready var doorways = [$Doorway1, $Doorway2, $Doorway3, $Doorway4]
@onready var enemy_types = [preload("res://EnemyType1.tscn"), preload("res://EnemyType2.tscn"), preload("res://EnemyType3.tscn")]
@export var initial_spawn_time: float = 5.0  # Time between spawns (initial)
@export var spawn_time_decrease: float = 0.2  # How much spawn time decreases per level
@export var max_difficulty_level: int = 4  # Max difficulty level
@export var max_enemies_per_spawn: int = 10  # Max number of enemies to spawn at once

var difficulty_level: int = 1
var spawn_timer: float = 0.0
var difficulty_timer: float = 60.0  # Time between difficulty increases
var current_level: int = 1  # Current level of the game

func _ready():
	# Set initial spawn timer based on the difficulty
	spawn_timer = initial_spawn_time

	# Start difficulty timer
	set_difficulty_timer()

func _process(delta):
	# Countdown the difficulty timer
	difficulty_timer -= delta

	# Check if difficulty timer has ended and increase difficulty
	if difficulty_timer <= 0:
		increase_difficulty()

	# Spawn enemies at regular intervals
	spawn_timer -= delta
	if spawn_timer <= 0:
		spawn_enemies()
		spawn_timer = initial_spawn_time - (current_level * spawn_time_decrease)

# Spawn enemies at random doorways
func spawn_enemies():
	var number_of_enemies = randi_range(1, current_level)  # Scale number based on current level
	var selected_doorways = get_random_doorways()

	for doorway in selected_doorways:
		var enemy_type = get_random_enemy_type()
		spawn_enemy(doorway.position, enemy_type, number_of_enemies)

# Randomly select doorways to spawn enemies
func get_random_doorways() -> Array:
	var selected_doorways = []
	var num_doorways = randi_range(1, 4)  # How many doorways to spawn at a time
	var chosen_indices = []

	# Choose random doorways
	while chosen_indices.size() < num_doorways:
		var index = randi_range(0, 3)
		if index not in chosen_indices:
			chosen_indices.append(index)
			selected_doorways.append(doorways[index])

	return selected_doorways

# Spawn an enemy at a specific position
func spawn_enemy(position: Vector2, enemy_type: PackedScene, num_enemies: int):
	for i in range(num_enemies):
		var enemy_instance = enemy_type.instantiate()
		enemy_instance.position = position
		add_child(enemy_instance)

# Get a random enemy type
func get_random_enemy_type() -> PackedScene:
	return enemy_types[randi_range(0, enemy_types.size() - 1)]

# Increase difficulty over time
func increase_difficulty():
	difficulty_level += 1
	current_level += 1
	difficulty_timer = 60.0  # Reset the timer
	if difficulty_level > max_difficulty_level:
		difficulty_level = max_difficulty_level

	# Optionally, increase the speed of enemies or their health here
	print("Difficulty increased to level %d" % difficulty_level)
	print("Current Level: %d" % current_level)
	spawn_timer = initial_spawn_time - (current_level * spawn_time_decrease)


Creating an enemy spawner system in Godot with all those features can be a bit complex, but it's definitely manageable. I'll break it down into the four main components you mentioned: selecting doorways, controlling the number and type of enemies, scaling difficulty, and timing-based difficulty progression.

Step 1: Basic Structure
First, let's set up the scene structure. You will need:

A spawner manager node to handle the spawning logic (a central script).
Doorway nodes that represent the potential entry points for the enemies.
Enemy scenes for different types of enemies.
A difficulty manager that controls the difficulty scaling over time.
Step 2: Spawner Manager Logic
The spawner manager will handle:

Choosing doorways for enemy spawning.
Determining the number of enemies to spawn.
Selecting the type of enemies to spawn.
Scaling difficulty over time based on the level and difficulty timer.
Let’s break this into the steps in code.

1. Set Up Doorways and Enemy Types
We’ll assume you have four doorways (could be nodes in your scene), and that you have various enemy types (each type could be an enemy scene with different behavior).

Doorways: These can be Node2D or Position2D nodes representing where enemies spawn.
Enemy Types: These could be different scenes representing different enemy types.
2. Spawner Manager Script
This script will handle the logic for the entire spawner system.


Explanation of Key Components:
difficulty_timer: This counts down to determine when to increase the difficulty level.
spawn_timer: This controls the interval between enemy spawns, and it scales with the difficulty.
get_random_doorways(): Randomly selects which doorways will spawn enemies. The number of doorways selected scales based on the current level.
spawn_enemy(): Spawns the enemies at the chosen doorways.
increase_difficulty(): Increases the difficulty based on the timer, and scales the spawn rate and other factors like enemy strength.
Step 3: Scaling the Difficulty
You can scale the difficulty by doing the following:

More enemies per spawn: This is handled by adjusting the number of enemies in spawn_enemies(), which depends on the current level.
Harder enemies: If you want enemies to become stronger as difficulty increases, you can modify the enemies themselves (for example, increase their health or speed based on difficulty_level).
More frequent spawns: This is handled by adjusting the spawn_timer (lower spawn time at higher levels).
Step 4: Fine-Tuning Difficulty
You can adjust the following parameters for more granular control:

spawn_time_decrease: How much faster spawns occur as the level progresses.
max_enemies_per_spawn: The maximum number of enemies to spawn per doorway at once.
difficulty_level: The level of difficulty, which can control enemy strength, spawn frequency, and other factors.
Step 5: Randomization and Balance
You can further adjust balance by:

Making the difficulty levels trigger more dynamically based on other game metrics (e.g., player's score, time elapsed, etc.).
Changing the logic for enemy scaling, so they become more challenging in terms of behavior as well as stats (speed, health, damage).
Conclusion
This system provides flexibility and scalability to create a challenging enemy spawn system. It allows:

Randomized doorway selection.
Controlled number of enemies based on the current level.
Randomized enemy types per spawn.
Difficulty scaling based on a timer and level progression.
You can tweak the values, add new mechanics, and easily scale it as your game grows. This setup should give you a solid foundation to expand on as you design your game’s difficulty and enemy progression.
